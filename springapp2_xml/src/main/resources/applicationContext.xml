<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="musicClassicBean"
          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.ClassicalMusic"
          scope="singleton"
          init-method="doMyInit"
          destroy-method="doMyDestroy"
          factory-method="getClassicalMusic">
    </bean>

    <bean id="musicRockBean"
          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.RockMusic">
    </bean>

    <bean id="musicTechnoBean"
          class="ru.ghostrog.spring.ru.ghostrog.spring.TechnoMusic">
    </bean>
    <!-->
    Добавление данных из внешнего файла
    <-->
    <context:property-placeholder location="classpath:musicPlayer.properties"/>

    <!--    init-method - инициализация бина-->
    <!--    destroy-method - удаление бина (только если scope=singleton)-->
    <!--    <bean id="musicClassicBean"-->
    <!--          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.ClassicalMusic"-->
    <!--          scope="prototype"-->
    <!--          init-method="doMyInit"-->
    <!--          destroy-method="doMyDestroy">-->
    <!--    </bean>-->


    <!--    &lt;!&ndash;>-->
    <!--        if scope="prototype" - каждый раз создаётся новый объект-->
    <!--    <&ndash;&gt;-->
    <!--    <bean id="musicPlayerBeanWithSetter"-->
    <!--          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer"-->
    <!--          scope="prototype">-->
    <!--        <property name="musicList" ref="musicClassicBean"/>-->
    <!--        -->
    <!--        <property name="name" value="${musicPlayer.name}"/>-->
    <!--        <property name="volume" value="${musicPlayer.volume}"/>-->
    <!--    </bean>-->


    <!-->
    DI внедрение зависимостей через конструктор

    <bean id="musicPlayerBean"
          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer">
        <constructor-arg ref="musicBean"/>
    </bean>


     DI внедрение зависимостей через setter

    <bean id="musicPlayerBeanWithSetter"
          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer">
        <property name="music" ref="musicBean"/>
     </bean>
    <-->

    <!-->
    DI ручное внедрение зависимостей, не бина, а значения через setter

    <bean id="musicPlayerBeanWithSetter"
          class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer">
        <property name="music" ref="musicBean"/>
        <property name="name" value="Best of the Best"/>
        <property name="volume" value="50"/>
    </bean>
    <-->

    <!-->
        DI внедрение зависимостей из внешнего файла

        <bean id="musicPlayerBeanWithSetter"
              class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer">
            <property name="musicList" ref="musicClassicBean"/>
            <property name="name" value="${musicPlayer.name}"/>
            <property name="volume" value="${musicPlayer.volume}"/>
        </bean>
    <-->
    <bean id="collectionInjection" class="ru.ghostrog.spring.ru.ghostrog.spring.ru.ghostrog.MusicPlayer">
        <property name="musicList">
            <list>
                <!-->
                Для добавления бинов в Лист использовать ref bean
                <-->
                <ref bean="musicClassicBean"/>
                <ref bean="musicRockBean"/>
                <ref bean="musicTechnoBean"/>
            </list>
        </property>
    </bean>


</beans>